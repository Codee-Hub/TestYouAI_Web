npx create-next-app@latest testyouai-front --typescript

npx create-next-app@latest . --typescript
  cria na msm pasta

    ExplicaÃ§Ã£o:
    npx â†’ executa o pacote sem instalar globalmente.

    create-next-app@latest â†’ ferramenta oficial para iniciar um projeto Next.js com a Ãºltima versÃ£o.

    testyouai-front â†’ nome da pasta onde serÃ¡ criado o projeto.

    --typescript â†’ jÃ¡ configura o projeto com suporte a TypeScript.

    ğŸ’¡ Resultado: cria uma estrutura completa com pastas como app/, public/, styles/ e arquivos tsconfig.json, next.config.js, entre outros.

npm install -D tailwindcss postcss autoprefixer

    ExplicaÃ§Ã£o:
    npm install â†’ instala pacotes via npm.

    -D ou --save-dev â†’ salva as dependÃªncias como "devDependencies" (usadas em tempo de desenvolvimento).

    tailwindcss â†’ o framework CSS que usaremos.

    postcss â†’ ferramenta para transformar CSS com plugins (Tailwind usa internamente).

    autoprefixer â†’ plugin do PostCSS que adiciona prefixos automaticamente para compatibilidade entre navegadores.

npx tailwindcss init -p

    ExplicaÃ§Ã£o:
    npx tailwindcss init â†’ cria o arquivo tailwind.config.js com configuraÃ§Ãµes padrÃ£o.

    -p â†’ tambÃ©m cria o arquivo postcss.config.js junto.

    ğŸ’¡ Resultado:

    tailwind.config.js: onde vocÃª personaliza temas, cores, fontes, etc.

    postcss.config.js: para o Tailwind funcionar com PostCSS.


// tailwind.config.js
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

    ExplicaÃ§Ã£o:
    content: define onde o Tailwind deve procurar pelas classes CSS. Ele faz isso escaneando os arquivos para gerar apenas os estilos usados no seu HTML/JSX.

    './app/**/*.{js,ts,jsx,tsx}': escaneia todos os arquivos da pasta app/.

    './components/**/*.{js,ts,jsx,tsx}': se vocÃª criar uma pasta components/, tambÃ©m serÃ¡ escaneada.

/* app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;
    ExplicaÃ§Ã£o:
    Essas diretivas importam os blocos principais do Tailwind:

    @tailwind base â†’ estilos base (reset, normalizaÃ§Ã£o).

    @tailwind components â†’ componentes prÃ©-estilizados (botÃµes, formulÃ¡rios, etc).

    @tailwind utilities â†’ as classes utilitÃ¡rias (como p-4, text-center, bg-blue-500).

    ğŸ’¡ Esse arquivo jÃ¡ estÃ¡ sendo importado em app/layout.tsx.

npm run dev


